import{_ as n,o as a,c as e,e as p}from"./app-273c6a11.js";const o={};function t(r,s){return a(),e("div",null,s[0]||(s[0]=[p(`<h1 id="vue-prop-的使用" tabindex="-1"><a class="header-anchor" href="#vue-prop-的使用" aria-hidden="true">#</a> Vue Prop 的使用</h1><h2 id="父子组件通信" tabindex="-1"><a class="header-anchor" href="#父子组件通信" aria-hidden="true">#</a> 父子组件通信</h2><ul><li><strong>父组件向子组件传值</strong>：使用 <code>prop</code>，<code>prop</code> 在子组件中像 <code>data</code> 数据一样使用。子组件通过 <code>props</code> 选项接收。</li><li><strong>子组件与父组件通信</strong>：子组件通过绑定事件（事件函数在父组件定义）和 <code>this.$emit(&#39;事件名&#39;)</code> 触发事件。</li><li><strong>单向下行绑定</strong>：<code>prop</code> 形成单向下行绑定，父组件更新会流向子组件，子组件内不应改变 <code>prop</code>。</li></ul><h2 id="prop-传值方式" tabindex="-1"><a class="header-anchor" href="#prop-传值方式" aria-hidden="true">#</a> Prop 传值方式</h2><ul><li><strong>静态 Props</strong>：父组件直接写 <code>&lt;v-child info=&quot;message&quot;&gt;&lt;/v-child&gt;</code>，子组件 <code>props: [&#39;info&#39;]</code> 接收，子组件模板中可直接使用 <code>{{info}}</code>。</li><li><strong>动态 Props</strong>：父组件使用 <code>v-bind</code> 绑定数据，如 <code>&lt;v-child :info=&quot;message&quot;&gt;&lt;/v-child&gt;</code>，父组件数据变化会传导给子组件。</li></ul><h2 id="prop-形式" tabindex="-1"><a class="header-anchor" href="#prop-形式" aria-hidden="true">#</a> Prop 形式</h2><ul><li><strong>数组形式</strong>：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;isPublished&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;commentIds&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;author&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>简单列出 <code>prop</code> 名。</li><li><strong>对象形式</strong>：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
  <span class="token literal-property property">isPublished</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">commentIds</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
  <span class="token literal-property property">callback</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
  <span class="token literal-property property">contactsPromise</span><span class="token operator">:</span> Promise
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>指定 <code>prop</code> 名和类型，便于检验。</li></ul><h2 id="prop-校验" tabindex="-1"><a class="header-anchor" href="#prop-校验" aria-hidden="true">#</a> Prop 校验</h2><ul><li>可为 <code>prop</code> 值提供验证对象，例如：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">propC</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;danger&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>校验在组件实例创建前进行，<code>data</code>、<code>computed</code> 等属性在 <code>default</code> 或 <code>validator</code> 中不可用。</li><li><code>type</code> 可为原生构造函数或自定义构造函数。</li></ul><h2 id="非-prop-特性与-attrs" tabindex="-1"><a class="header-anchor" href="#非-prop-特性与-attrs" aria-hidden="true">#</a> 非 Prop 特性与 <code>$attrs</code></h2><ul><li><strong>非 Prop 特性</strong>：传给组件但未在 <code>props</code> 中定义的特性，可通过 <code>$attrs</code> 获取。</li><li><strong><code>$attrs</code></strong>：<code>$attrs</code> 中只有未注册的特性。</li></ul>`,11)]))}const l=n(o,[["render",t],["__file","vue-Prop-use.html.vue"]]);export{l as default};
