import{_ as a,r as o,o as n,c,a as d,b as e,f as l,d as i}from"./app-fb9de7e1.js";const h={},s={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#%E6%B1%87%E6%80%BB%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"};function p(g,t){const r=o("ExternalLinkIcon");return n(),c("div",null,[t[1]||(t[1]=d("h1",{id:"js运算符及其优先级",tabindex:"-1"},[d("a",{class:"header-anchor",href:"#js运算符及其优先级","aria-hidden":"true"},"#"),e(" js运算符及其优先级")],-1)),t[2]||(t[2]=d("p",null,[d("img",{src:"https://pic4.zhimg.com/v2-140335727c6f021c019e731f49b0ed93_r.jpg",alt:"img"})],-1)),d("p",null,[d("a",s,[t[0]||(t[0]=e("优先级表")),l(r)])]),t[3]||(t[3]=i('<table><thead><tr><th>优先级</th><th>运算符</th><th>说明</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>[]、.、()</td><td>字段访问、数组索引、函数调用和表达式分组</td><td>从左向右</td></tr><tr><td>2</td><td>++ -- -~! delete new typeof void</td><td>一元运算符、返回数据类型、对象创建、未定义的值</td><td>从右向左</td></tr><tr><td>3</td><td>*、/、%</td><td>相乘、相除、求余数</td><td>从左向右</td></tr><tr><td>4</td><td>+、-</td><td>相加、相减、字符串串联</td><td>从左向右</td></tr><tr><td>5</td><td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td><td>左位移、右位移、无符号右移</td><td>从左向右</td></tr><tr><td>6</td><td>&lt;、&lt;=、&gt;、&gt;=、instanceof</td><td>小于、小于或等于、大于、大于或等于、是否为特定类的实例</td><td>从左向右</td></tr><tr><td>7</td><td>==、!=、===、!==</td><td>相等、不相等、全等，不全等</td><td>从左向右</td></tr><tr><td>8</td><td>&amp;</td><td>按位“与”</td><td>从左向右</td></tr><tr><td>9</td><td>^</td><td>按位“异或”</td><td>从左向右</td></tr><tr><td>10</td><td>|</td><td>按位“或”</td><td>从左向右</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>逻辑“与”</td><td>从左向右</td></tr><tr><td>12</td><td>||</td><td>逻辑“或”</td><td>从左向右</td></tr><tr><td>13</td><td>?:</td><td>条件运算符</td><td>从右向左</td></tr><tr><td>14</td><td>=、+=、-=、*=、/=、%=、&amp;=、</td><td>=、^=、&lt;、&lt;=、&gt;、&gt;=、&gt;&gt;=</td><td>混合赋值运算符</td></tr><tr><td>15</td><td>,</td><td>多个计算</td><td>按优先级计算，然后从右向左</td></tr></tbody></table><h2 id="零合并操作符" tabindex="-1"><a class="header-anchor" href="#零合并操作符" aria-hidden="true">#</a> . 零合并操作符 ??</h2><p>零合并操作符 <code>??</code> 是一个逻辑操作符，当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时，返回右侧操作数，否则返回左侧操作数。</p><h2 id="可选链操作符" tabindex="-1"><a class="header-anchor" href="#可选链操作符" aria-hidden="true">#</a> 可选链操作符 ?.</h2><p>可选链操作符 <code>?.</code> 允许读取位于连接对象链深处的属性的值，而不必验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为 <code>null</code> 或者 <code>undefined</code> 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。</p><h2 id="位运算符-与" tabindex="-1"><a class="header-anchor" href="#位运算符-与" aria-hidden="true">#</a> 位运算符 &gt;&gt; 与 &gt;&gt;&gt;</h2><p>有符号右移操作符 <code>&gt;&gt;</code> 将第一个操作数向右移动指定的位数，多余的位移到右边被丢弃，高位补其符号位，正数补 0，负数则补 1。因为新的最左位与前一个最左位的值相同，所以符号位（最左位）不会改变。</p><h2 id="短路运算符-与" tabindex="-1"><a class="header-anchor" href="#短路运算符-与" aria-hidden="true">#</a> 短路运算符 &amp;&amp; 与 ||</h2><p>我们知道逻辑与 <code>&amp;&amp;</code> 与逻辑或 <code>||</code> 是短路运算符，短路运算符就是从左到右的运算中前者满足要求，就不再执行后者了。</p><p>可以理解为：</p><ul><li><code>&amp;&amp;</code> 为取假运算，从左到右依次判断，如果遇到一个假值，就返回假值，以后不再执行，否则返回最后一个真值</li><li><code>||</code> 为取真运算，从左到右依次判断，如果遇到一个真值，就返回真值，以后不再执行，否则返回最后一个假值</li></ul>',11))])}const m=a(h,[["render",p],["__file","js运算符及其优先级.html.vue"]]);export{m as default};
