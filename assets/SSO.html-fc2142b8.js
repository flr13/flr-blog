import{_ as p,r as s,o as l,c as a,a as r,b as t,d as n,e as i}from"./app-acdf3854.js";const S={},d={href:"http://www.53bk.com/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://www.53bk.com/",target:"_blank",rel:"noopener noreferrer"};function k(g,e){const o=s("ExternalLinkIcon");return l(),a("div",null,[e[4]||(e[4]=r("h2",{id:"单点登陆",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#单点登陆","aria-hidden":"true"},"#"),t(" 单点登陆")],-1)),r("p",null,[r("a",d,[e[0]||(e[0]=t("SSO")),n(o)]),e[2]||(e[2]=t("，")),r("a",u,[e[1]||(e[1]=t("单一登录")),n(o)]),e[3]||(e[3]=t("（single sign-on），意思是指在多套系统并存的环境下，用户只需登录一次即可访问其他授权的系统"))]),e[5]||(e[5]=i("<p>从SSO在技术实现的角度，SSO的实现通常有以下三种技术实现途径：代理登录（agent）、令牌环（token）、身份票据（ticket）。</p><p><strong>代理登录（agent）</strong>：代理登录的原理就是在IE端通过表单提交的方式模拟应用系统的登录操作，实现SSO。</p><p>代理登录的优点就是无需对原有系统做任何改造，适用于无法改造的旧系统；</p><p>其缺点很明显：</p><p>1、稳定性差，一旦登录期间某台服务器无法响应，则该服务器无法单点登录。</p><p>2、安全性差，用户名密码通过明文传输。</p><p>3、由于登录期间需要监控各个系统的响应，所以不建议大量使用，否则会影响登录的性能。</p><p>4、由于IE的安全限制，代理登录必须在同域的情况下运行。</p><p><strong>令牌环（token）</strong>：通过Cookie共享令牌环的方式传递当前用户信息，实现SSO。（令牌环类似IBM的LTPA Token，IBM系列产品间能实现配置式SSO，就依靠此技术。如IBM Websphere Portal Server与Lotus Domino Server之间的SSO）</p><p>令牌环的方式最大好处在于无需统一的验证服务器，是“多点验证模式”的主力实现技术，各个服务器都通过统一的密钥对令牌进行加密解密，所以该方式具有安全性高、稳定性好、性能消耗低等优点；其缺点就是必须保证各台应用服务器同域。</p><p><strong>身份票据（ticket）</strong>：与令牌环不一样，身份票据是通过URL的方式传递，通过“两次握手”的方式，实现SSO。（如开源的CAS就是这种原理）</p><p>身份票据的方式，是适用范围最广的一种SSO实现方式，可以解决跨域等问题，安全性高、稳定性好；其缺点就是必须增加一台验证服务器，保证在高压下验证服务器的稳定运行，性能方面由于每次登录都需要访问验证服务器，所以比令牌环的方式略差一点。</p><p>权限路由登陆：</p><ol><li>创建vue实例的时候将vue-router挂载，但这个时候vue-router挂载一些登录或者不用权限的公用的页面。</li><li>当用户登录后，获取用role，将role和路由表每个页面的需要的权限作比较，生成最终用户可访问的路由表。</li><li>调用router.addRoutes(store.getters.addRouters)添加用户可访问的路由。</li><li>使用vuex管理路由表，根据vuex中可访问的路由渲染侧边栏组件。</li></ol>",14))])}const m=p(S,[["render",k],["__file","SSO.html.vue"]]);export{m as default};
