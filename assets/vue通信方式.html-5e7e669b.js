import{_ as s,o as a,c as e,e as t}from"./app-aadb3056.js";const p={};function o(c,n){return a(),e("div",null,n[0]||(n[0]=[t(`<h1 id="vue通信方式" tabindex="-1"><a class="header-anchor" href="#vue通信方式" aria-hidden="true">#</a> vue通信方式</h1><ol><li>父组件向子组件传值（props）</li><li>子组件向父组件传值（$emit）</li><li>兄弟组件之间传值（eventBus）</li><li>父组件操作子组件的实例（ref）</li><li>$parent 和 $children</li><li>跨层级通信provide/inject</li><li>$attrs 和 $listeners</li><li>localStorage/sessionStorage</li><li>Vuex</li><li>v-model</li><li>.sync 修饰符</li><li>通过 $root 访问根实例</li><li>slot</li></ol><h2 id="_1-props-emit" tabindex="-1"><a class="header-anchor" href="#_1-props-emit" aria-hidden="true">#</a> 1.props / $emit</h2><p>父组件通过<code>props</code>的方式向子组件传递数据，而通过<code>$emit</code> 子组件可以向父组件通信。</p><h2 id="_2-v-model-指令" tabindex="-1"><a class="header-anchor" href="#_2-v-model-指令" aria-hidden="true">#</a> 2.v-model 指令</h2><p>v-model 是用来在表单控件或者组件上创建双向绑定的，他的本质是 v-bind 和 v-on 的语法糖，<strong>在一个组件上使用 v-model，默认会为组件绑定名为 value 的 prop 和名为 input 的事件。</strong></p><p>默认为父组件绑定名为 <code>:value=&quot;inputValue&quot;</code>的属性，和<code>@input=&quot;(v) =&gt; { this.inputValue = v }&quot;</code>事件，子组件通过 <code>this.$emit(&#39;input&#39;, value)</code> 通知父组件</p><h2 id="_3-sync-修饰符" tabindex="-1"><a class="header-anchor" href="#_3-sync-修饰符" aria-hidden="true">#</a> 3. .sync 修饰符</h2><ul><li><code>.sync</code> 修饰符在 vue 1.x 的版本中就已经提供，1.x 版本中，当子组件改变了一个带有 <code>.sync</code> 的 <code>prop</code> 的值时，会将这个值同步到父组件中的值。这样使用起来十分方便，但问题也十分明显，这样破坏了单向数据流，当应用复杂时，debug 的成本会非常高。</li><li>于是乎，在vue 2.0中移除了 <code>.sync</code>。但是在实际的应用中，<code>.sync</code> 是有它的应用场景的，所以在 <code>vue 2.3</code> 版本中，又迎来了<code>全新的 .sync</code>。</li><li>新的 <code>.sync</code> 修饰符所实现的已经不再是真正的双向绑定，它的本质和 <code>v-model</code> 类似，只是一种缩写。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//父组件</span>
<span class="token operator">&lt;</span>text<span class="token operator">-</span>document v<span class="token operator">-</span>bind<span class="token operator">:</span>title<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">&quot;doc.title&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//子组件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:title&#39;</span><span class="token punctuation">,</span> newTitle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-parent-parent-parent-children" tabindex="-1"><a class="header-anchor" href="#_4-parent-parent-parent-children" aria-hidden="true">#</a> 4.parent/parent / $parent/$children</h2><p>通过<code>$parent</code>和<code>$children</code>就可以访问组件的实例，拿到实例代表什么？代表可以访问此组件的<code>所有方法</code>和<code>data</code></p><h2 id="_5-provide-inject" tabindex="-1"><a class="header-anchor" href="#_5-provide-inject" aria-hidden="true">#</a> 5.provide / inject</h2><p><code>provide / inject</code> 是vue2.2.0新增的api, 简单来说就是父组件中通过<code>provide来提供变量</code>, 然后再子组件中通过<code>inject来注入变量</code>。</p><p>provide 选项应该是</p><p>一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 ES2015 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。 inject 选项应该是：</p><p>一个字符串数组 一个对象(详情点击这里)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 祖先组件 提供foo</span>
<span class="token comment">//第一种</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;father&quot;</span><span class="token punctuation">,</span>
  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//第二种</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;father&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">provide</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span><span class="token string">&#39;hello~~~~&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">//后代组件 注入foo, 直接当做this.foo来用</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inject</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-ref-refs" tabindex="-1"><a class="header-anchor" href="#_6-ref-refs" aria-hidden="true">#</a> 6.ref / $refs</h2><p><code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 <code>DOM 元素</code>；如果用在<code>子组件</code>上，引用就指向<code>组件实例</code>，可以通过实例直接调用组件的方法或访问数据， 我们看一个ref 来访问组件的例子:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>父组件
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
    <span class="token comment">//子组件加上ref属性</span>
  <span class="token operator">&lt;</span>strategy<span class="token operator">-</span>index
    <span class="token operator">:</span>strategy<span class="token operator">-</span>type<span class="token operator">=</span><span class="token string">&quot;2&quot;</span>
    ref<span class="token operator">=</span><span class="token string">&quot;strategyIndex&quot;</span>
  <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token comment">//直接调用子组件的方法</span>
<span class="token function">getChildMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>strategyIndex<span class="token punctuation">.</span><span class="token function">onclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
子组件
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&#39;onclick()&#39;</span><span class="token operator">&gt;</span>
      
    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token function">onclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是子组件的方法&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-eventbus" tabindex="-1"><a class="header-anchor" href="#_7-eventbus" aria-hidden="true">#</a> 7.eventBus</h2><p><code>eventBus</code>，其实原理就是 事件订阅发布，<code>eventBus</code> 又称为事件总线，在vue中可以使用它来作为沟通桥梁的概念, 就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件， 所以组件都可以通知其他组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置 挂载至 vue 的原型上</span>
子组件<span class="token number">1</span>
<span class="token comment">// 调用 兄弟组件 方法</span>
<span class="token function">handleFetchHomeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;valueUpdate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">//使用$emit(&#39;xxx&#39;)</span>
  <span class="token punctuation">}</span>
 <span class="token comment">// 接收 事件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;valueUpdate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-vuex" tabindex="-1"><a class="header-anchor" href="#_8-vuex" aria-hidden="true">#</a> 8.Vuex</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化.</p><p>Vuex 解决了多个视图依赖于同一状态和来自不同视图的行为需要变更同一状态的问题，将开发者的精力聚焦于数据的更新而不是数据在组件之间的传递上</p><h2 id="_9-localstorage-sessionstorage" tabindex="-1"><a class="header-anchor" href="#_9-localstorage-sessionstorage" aria-hidden="true">#</a> 9.localStorage / sessionStorage</h2><p>这种通信比较简单,缺点是数据和状态比较混乱,不太容易维护。</p><p>通过window.localStorage.getItem(key)获取数据 通过window.localStorage.setItem(key,value)存储数据通过 $root 访问根实例</p><h2 id="_10-通过-root-访问根实例" tabindex="-1"><a class="header-anchor" href="#_10-通过-root-访问根实例" aria-hidden="true">#</a> 10.通过 $root 访问根实例</h2><p>通过 <code>$root</code>，任何组件都可以获取当前<code>组件树的根 Vue 实例</code>，通过维护根实例上的 data，就可以实现组件间的<code>数据共享</code>。</p><h2 id="_11-attrs与-listeners" tabindex="-1"><a class="header-anchor" href="#_11-attrs与-listeners" aria-hidden="true">#</a> 11.<code>$attrs</code>与 <code>$listeners</code></h2><p>$attrs：包含了父作用域中不被认为 (且不预期为) props 的特性绑定 (class 和 style 除外)，并且可以通过 v-bind=&quot;$attrs&quot; 传入内部组件。当一个组件没有声明任何 props 时，它包含所有父作用域的绑定 (class 和 style 除外)。</p><p>$listeners：包含了父作用域中的 (不含 .native 修饰符) v-on 事件监听器。它可以通过 v-on=&quot;$listeners&quot; 传入内部组件。它是一个对象，里面包含了作用在这个组件上的所有事件监听器，相当于子组件继承了父组件的事件。</p>`,36)]))}const l=s(p,[["render",o],["__file","vue通信方式.html.vue"]]);export{l as default};
