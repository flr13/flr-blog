import{_ as a,o as s,c as n,e as t}from"./app-aadb3056.js";const r={};function o(d,e){return s(),n("div",null,e[0]||(e[0]=[t(`<h1 id="map-和-set的深度解析" tabindex="-1"><a class="header-anchor" href="#map-和-set的深度解析" aria-hidden="true">#</a> map 和 set的深度解析</h1><h2 id="_1-set-和-map-的定义" tabindex="-1"><a class="header-anchor" href="#_1-set-和-map-的定义" aria-hidden="true">#</a> 1. Set 和 Map 的定义</h2><h3 id="_1-1-set" tabindex="-1"><a class="header-anchor" href="#_1-1-set" aria-hidden="true">#</a> 1.1 Set</h3><ul><li><strong>定义</strong>：Set 是一种集合的数据结构，允许存储任何类型的唯一值，无论是原始值还是对象引用。</li><li><strong>特点</strong>： <ul><li>Set 对象是值的集合，可以按照插入的顺序迭代其元素。</li><li>Set 中的元素只会出现一次，即 Set 中的元素是唯一的。</li></ul></li></ul><h3 id="_1-2-map" tabindex="-1"><a class="header-anchor" href="#_1-2-map" aria-hidden="true">#</a> 1.2 Map</h3><ul><li><strong>定义</strong>：Map 是一种字典的数据结构，保存键值对，并且能够记住键的原始插入顺序。</li><li><strong>特点</strong>： <ul><li>任何值（对象或者原始值）都可以作为一个键或一个值。</li><li>一个 Map 对象在迭代时会根据对象中元素的插入顺序来进行，每次迭代返回一个形式为 <code>[key, value]</code> 的数组。</li></ul></li></ul><h2 id="_2-集合和字典的区别" tabindex="-1"><a class="header-anchor" href="#_2-集合和字典的区别" aria-hidden="true">#</a> 2. 集合和字典的区别</h2><h3 id="_2-1-共同点" tabindex="-1"><a class="header-anchor" href="#_2-1-共同点" aria-hidden="true">#</a> 2.1 共同点</h3><ul><li>都可以存储不重复的值。</li></ul><h3 id="_2-2-不同点" tabindex="-1"><a class="header-anchor" href="#_2-2-不同点" aria-hidden="true">#</a> 2.2 不同点</h3><ul><li><strong>集合</strong>：以 <code>[值, 值]</code> 的形式存储元素。</li><li><strong>字典</strong>：以 <code>[键, 值]</code> 的形式存储元素，每个键都是唯一的。</li></ul><h2 id="_3-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-基本使用" aria-hidden="true">#</a> 3. 基本使用</h2><h3 id="_3-1-语法" tabindex="-1"><a class="header-anchor" href="#_3-1-语法" aria-hidden="true">#</a> 3.1 语法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-操作方法" tabindex="-1"><a class="header-anchor" href="#_3-2-操作方法" aria-hidden="true">#</a> 3.2 操作方法</h3><ul><li><strong><code>set(key, value)</code></strong>：向 Map 中加入或更新键值对。</li><li><strong><code>get(key)</code></strong>：读取 key 对应的值，如果没有，返回 <code>undefined</code>。</li><li><strong><code>has(key)</code></strong>：判断某个键是否在 Map 对象中，存在返回 <code>true</code>，否则返回 <code>false</code>。</li><li><strong><code>delete(key)</code></strong>：删除某个键，成功返回 <code>true</code>，失败返回 <code>false</code>。</li><li><strong><code>clear()</code></strong>：删除所有元素。</li></ul><h3 id="_3-3-遍历方法" tabindex="-1"><a class="header-anchor" href="#_3-3-遍历方法" aria-hidden="true">#</a> 3.3 遍历方法</h3><ul><li><strong><code>keys()</code></strong>：返回键名的遍历器。</li><li><strong><code>values()</code></strong>：返回键值的遍历器。</li><li><strong><code>entries()</code></strong>：返回所有成员的遍历器。</li><li><strong><code>forEach()</code></strong>：遍历 Map 的所有成员。</li></ul><hr>`,19)]))}const l=a(r,[["render",o],["__file","map - set的Deep-sum.html.vue"]]);export{l as default};
