import{_ as a,o as s,c as e,e as t}from"./app-aadb3056.js";const c={};function o(p,n){return s(),e("div",null,n[0]||(n[0]=[t(`<h1 id="async-await-技术文档" tabindex="-1"><a class="header-anchor" href="#async-await-技术文档" aria-hidden="true">#</a> async/await 技术文档</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p><code>async/await</code> 是 JavaScript 中用于处理异步操作的语法糖，它基于 <code>Promise</code> 实现，使得异步代码的编写更加简洁和易于理解。通过 <code>async/await</code>，异步代码可以以类似同步代码的风格编写，从而提高代码的可读性和可维护性。</p><h2 id="_2-基本语法" tabindex="-1"><a class="header-anchor" href="#_2-基本语法" aria-hidden="true">#</a> 2. 基本语法</h2><h3 id="_2-1-async-函数" tabindex="-1"><a class="header-anchor" href="#_2-1-async-函数" aria-hidden="true">#</a> 2.1 async 函数</h3><p><code>async</code> 函数是一个返回 <code>Promise</code> 对象的函数。它可以让异步操作更加直观。</p><h4 id="_2-1-1-基本语法" tabindex="-1"><a class="header-anchor" href="#_2-1-1-基本语法" aria-hidden="true">#</a> 2.1.1 基本语法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token parameter">parameters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数体</span>
<span class="token punctuation">}</span>


#### <span class="token number">2.1</span><span class="token number">.2</span> 示例
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>\`javascript
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Hello, async/await!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-3-返回值" tabindex="-1"><a class="header-anchor" href="#_2-1-3-返回值" aria-hidden="true">#</a> 2.1.3 返回值</h4><p><code>async</code> 函数总是返回一个 <code>Promise</code> 对象。如果函数返回的是一个普通值，它会被自动包装成一个解析为该值的 <code>Promise</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Hello, async/await!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, async/await!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-await-表达式" tabindex="-1"><a class="header-anchor" href="#_2-2-await-表达式" aria-hidden="true">#</a> 2.2 await 表达式</h3><p><code>await</code> 关键字用于等待一个 <code>Promise</code> 对象完成。它只能在 <code>async</code> 函数中使用。</p><h4 id="_2-2-1-基本语法" tabindex="-1"><a class="header-anchor" href="#_2-2-1-基本语法" aria-hidden="true">#</a> 2.2.1 基本语法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-2-2-示例" tabindex="-1"><a class="header-anchor" href="#_2-2-2-示例" aria-hidden="true">#</a> 2.2.2 示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-2-3-注意事项" aria-hidden="true">#</a> 2.2.3 注意事项</h4><ol><li><strong>只能在 <code>async</code> 函数中使用 <code>await</code></strong>：如果在非 <code>async</code> 函数中使用 <code>await</code>，会导致语法错误。</li><li><strong>错误处理</strong>：建议使用 <code>try...catch</code> 包裹 <code>await</code> 表达式，以便捕获可能的错误。</li><li><strong>返回值</strong>：<code>async</code> 函数总是返回一个 <code>Promise</code> 对象。</li></ol><h2 id="_3-错误处理" tabindex="-1"><a class="header-anchor" href="#_3-错误处理" aria-hidden="true">#</a> 3. 错误处理</h2><p>在 <code>async/await</code> 中，可以使用 <code>try...catch</code> 语句来捕获错误。</p><h3 id="_3-1-示例" tabindex="-1"><a class="header-anchor" href="#_3-1-示例" aria-hidden="true">#</a> 3.1 示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error fetching data:&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-错误处理的注意事项" tabindex="-1"><a class="header-anchor" href="#_3-2-错误处理的注意事项" aria-hidden="true">#</a> 3.2 错误处理的注意事项</h3><ul><li>如果在 <code>await</code> 表达式中发生错误，<code>catch</code> 块会捕获到该错误。</li><li>如果需要在捕获错误后继续执行代码，可以在 <code>catch</code> 块中处理错误。</li></ul><h2 id="_4-示例代码" tabindex="-1"><a class="header-anchor" href="#_4-示例代码" aria-hidden="true">#</a> 4. 示例代码</h2><p>以下是一个完整的示例代码，展示如何使用 <code>async/await</code> 链式调用动画函数。</p><h3 id="_4-1-示例代码" tabindex="-1"><a class="header-anchor" href="#_4-1-示例代码" aria-hidden="true">#</a> 4.1 示例代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">chainAnimationsAsync</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> animations</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> anim <span class="token keyword">of</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">anim</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 忽略错误，继续执行 */</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error in animation:&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-解释" tabindex="-1"><a class="header-anchor" href="#_4-2-解释" aria-hidden="true">#</a> 4.2 解释</h3><ul><li><code>chainAnimationsAsync</code> 是一个 <code>async</code> 函数，它接受一个 DOM 元素 <code>elem</code> 和一个动画函数数组 <code>animations</code>。</li><li>使用 <code>for...of</code> 循环遍历动画函数数组，并通过 <code>await</code> 依次执行每个动画函数。</li><li>如果某个动画函数抛出错误，<code>catch</code> 块会捕获到该错误，但不会中断整个函数的执行。</li></ul><h2 id="_5-与-promise-的对比" tabindex="-1"><a class="header-anchor" href="#_5-与-promise-的对比" aria-hidden="true">#</a> 5. 与 Promise 的对比</h2><p><code>async/await</code> 是基于 <code>Promise</code> 的，但它提供了更简洁的语法。</p><h3 id="_5-1-使用-promise" tabindex="-1"><a class="header-anchor" href="#_5-1-使用-promise" aria-hidden="true">#</a> 5.1 使用 Promise</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error fetching data:&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-使用-async-await" tabindex="-1"><a class="header-anchor" href="#_5-2-使用-async-await" aria-hidden="true">#</a> 5.2 使用 async/await</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error fetching data:&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-优点" tabindex="-1"><a class="header-anchor" href="#_5-3-优点" aria-hidden="true">#</a> 5.3 优点</h3><ul><li><strong>代码更简洁</strong>：<code>async/await</code> 的代码更接近同步代码的风格，可读性更高。</li><li><strong>错误处理更直观</strong>：使用 <code>try...catch</code> 可以更直观地捕获错误。</li></ul><h3 id="_5-4-缺点" tabindex="-1"><a class="header-anchor" href="#_5-4-缺点" aria-hidden="true">#</a> 5.4 缺点</h3><ul><li><strong>调试难度</strong>：在某些情况下，调试 <code>async/await</code> 代码可能比调试 <code>Promise</code> 代码更复杂。</li><li><strong>性能差异</strong>：在某些极端情况下，<code>async/await</code> 的性能可能略低于 <code>Promise</code>，但这种差异通常可以忽略不计。</li></ul><h2 id="_6-注意事项" tabindex="-1"><a class="header-anchor" href="#_6-注意事项" aria-hidden="true">#</a> 6. 注意事项</h2><ol><li><strong>只能在 <code>async</code> 函数中使用 <code>await</code></strong>：如果在非 <code>async</code> 函数中使用 <code>await</code>，会导致语法错误。</li><li><strong>错误处理</strong>：建议使用 <code>try...catch</code> 包裹 <code>await</code> 表达式，以便捕获可能的错误。</li><li><strong>返回值</strong>：<code>async</code> 函数总是返回一个 <code>Promise</code> 对象。</li><li><strong>并发执行</strong>：如果需要并发执行多个异步操作，可以使用 <code>Promise.all</code> 或 <code>Promise.race</code>。</li></ol><h2 id="_7-并发执行" tabindex="-1"><a class="header-anchor" href="#_7-并发执行" aria-hidden="true">#</a> 7. 并发执行</h2><p>如果需要并发执行多个异步操作，可以使用 <code>Promise.all</code> 或 <code>Promise.race</code>。</p><h3 id="_7-1-使用-promise-all" tabindex="-1"><a class="header-anchor" href="#_7-1-使用-promise-all" aria-hidden="true">#</a> 7.1 使用 Promise.all</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>response1<span class="token punctuation">,</span> response2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data2&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> data1 <span class="token operator">=</span> <span class="token keyword">await</span> response1<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> response2<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span> data1<span class="token punctuation">,</span> data2 <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error fetching data:&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-使用-promise-race" tabindex="-1"><a class="header-anchor" href="#_7-2-使用-promise-race" aria-hidden="true">#</a> 7.2 使用 Promise.race</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data2&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error fetching data:&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-解释" tabindex="-1"><a class="header-anchor" href="#_7-3-解释" aria-hidden="true">#</a> 7.3 解释</h3><ul><li><code>Promise.all</code> 会等待所有 <code>Promise</code> 完成，返回一个包含所有结果的数组。</li><li><code>Promise.race</code> 会返回第一个完成的 <code>Promise</code> 的结果。</li></ul><h2 id="_8-最佳实践" tabindex="-1"><a class="header-anchor" href="#_8-最佳实践" aria-hidden="true">#</a> 8. 最佳实践</h2><ol><li><strong>使用 <code>try...catch</code> 进行错误处理</strong>：确保每个 <code>await</code> 表达式都被 <code>try...catch</code> 包裹，以便捕获可能的错误。</li><li><strong>避免嵌套 <code>async/await</code></strong>：尽量减少嵌套的 <code>async/await</code>，以保持代码的简洁性。</li><li><strong>合理使用并发</strong>：在需要并发执行多个异步操作时，使用 <code>Promise.all</code> 或 <code>Promise.race</code>，而不是依次等待每个操作完成。</li><li><strong>避免滥用 <code>async/await</code></strong>：虽然 <code>async/await</code> 让代码更简洁，但并不是所有异步操作都需要使用它。在某些情况下，<code>Promise</code> 可能是更好的选择。</li></ol><h2 id="_9-总结" tabindex="-1"><a class="header-anchor" href="#_9-总结" aria-hidden="true">#</a> 9. 总结</h2><p><code>async/await</code> 是处理异步操作的强大工具，它让代码更加简洁和易于维护。通过合理使用 <code>async/await</code>，可以显著提升代码的可读性和可维护性。然而，在使用时需要注意其语法限制和错误处理机制，以确保代码的健壮性。</p><hr><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
这个技术文档包含了 \`async/await\` 的详细语法说明、示例代码、错误处理、并发执行以及最佳实践等内容，适合用作技术文档或学习资料。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,57)]))}const l=a(c,[["render",o],["__file","asyn  await.html.vue"]]);export{l as default};
