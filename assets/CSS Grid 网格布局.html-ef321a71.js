import{_ as n,o as s,c as t,e}from"./app-b78b632b.js";const i="/flr-blog/assets/1708669902041-7dcd80be.png",l={};function p(o,a){return s(),t("div",null,a[0]||(a[0]=[e(`<h3 id="css-grid-网格布局" tabindex="-1"><a class="header-anchor" href="#css-grid-网格布局" aria-hidden="true">#</a> CSS Grid 网格布局</h3><h4 id="什么是grid布局" tabindex="-1"><a class="header-anchor" href="#什么是grid布局" aria-hidden="true">#</a> 什么是grid布局</h4><blockquote><p>Grid 译为网格的意思，故 Grid 布局中文唤为网格布局，它是众多网页布局中的一种可选方案。它可以将网页划分成一个个网格，而且可以任意组合不同的网格以达到各种各样的布局，不需要通过复杂的 CSS 样式就可以实现复杂的网页布局。</p></blockquote><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><ol><li><h5 id="容器-container-和-项目-item" tabindex="-1"><a class="header-anchor" href="#容器-container-和-项目-item" aria-hidden="true">#</a> <strong>容器（container）和 项目（item）</strong></h5><p>**容器（container）：**确定网格布局的区域，最外层的元素就是容器。 <strong>项目（item）</strong>：容器下的第一代子元素就是项目，项目里面的子元素不包括在内。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>采用 Grid 布局的区域，我们称之为“容器”，容器内部采用网格定位的子元素称之为“项目”。我们来看下面一段 html结构，下面这段代码中类名为 container 的 div 就可以视为容器，内部三个 span 元素视为项目。</p></blockquote></li><li><h5 id="行和列" tabindex="-1"><a class="header-anchor" href="#行和列" aria-hidden="true">#</a> 行和列</h5><blockquote><p>容器里面的水平区域称为&quot;行&quot;（row），垂直区域称为&quot;列&quot;（column）</p></blockquote><p><img src="`+i+'" alt="1708669902041"></p></li><li><h5 id="网格线和单元格" tabindex="-1"><a class="header-anchor" href="#网格线和单元格" aria-hidden="true">#</a> 网格线和单元格</h5><p>**单元格（cell）：**行和列的交叉区域就叫做单元格。正常情况下，n行和m列会产生 n x m 个单元格。 **网格线（grid line）：**划分网格的线叫做网格线，水平网格线划分出行，垂直网格线划分出列。正常情况下，n 行有 n + 1 根水平网格线，m 列有 m + 1 根垂直网格线。</p></li></ol><h4 id="grid-布局属性" tabindex="-1"><a class="header-anchor" href="#grid-布局属性" aria-hidden="true">#</a> Grid 布局属性</h4><ol><li><h5 id="display-grid" tabindex="-1"><a class="header-anchor" href="#display-grid" aria-hidden="true">#</a> display:grid</h5></li><li><h5 id="grid-template-columns-属性-grid-template-rows-属性" tabindex="-1"><a class="header-anchor" href="#grid-template-columns-属性-grid-template-rows-属性" aria-hidden="true">#</a> grid-template-columns 属性，grid-template-rows 属性</h5></li><li><h5 id="grid-row-gap-属性-grid-column-gap-属性-grid-gap-属性" tabindex="-1"><a class="header-anchor" href="#grid-row-gap-属性-grid-column-gap-属性-grid-gap-属性" aria-hidden="true">#</a> grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性</h5></li><li><h5 id="grid-template-areas-属性" tabindex="-1"><a class="header-anchor" href="#grid-template-areas-属性" aria-hidden="true">#</a> grid-template-areas 属性</h5></li><li><h5 id="grid-auto-flow-row-column-row-dense-column-dense-属性" tabindex="-1"><a class="header-anchor" href="#grid-auto-flow-row-column-row-dense-column-dense-属性" aria-hidden="true">#</a> grid-auto-flow: row | column | row dense | column dense 属性</h5></li><li><h5 id="justify-items、align-items、place-items-属性" tabindex="-1"><a class="header-anchor" href="#justify-items、align-items、place-items-属性" aria-hidden="true">#</a> justify-items、align-items、place-items 属性</h5></li></ol>',7)]))}const c=n(l,[["render",p],["__file","CSS Grid 网格布局.html.vue"]]);export{c as default};
